package recommend

import (
	db "backend/database"

	"backend/model"
)

type ResourceModel struct {
	model.BaseModel
	Name        string `gorm:"column:name;"`
	Description string `gorm:"column:description;"`
	Url         string `gorm:"column:url;"`
	Tag         string `gorm:"column:tag;"`
}

// Optional: You can define a table name different from the default table name generated by GORM
func (ResourceModel) TableName() string {
	return "resources"
}

type UserActionModel struct {
	model.BaseModel
	UserID     int    `gorm:"column:user_id"`
	ResourceID int    `gorm:"column:resource_id"`
	ActionType string `gorm:"column:action_type"`
}

// Optional: You can define a table name different from the default table name generated by GORM
func (UserActionModel) TableName() string {
	return "user_actions"
}

func (u *UserActionModel) GetUserActionById(uid int, action string) ([]UserActionModel, error) {
	actinsList := make([]UserActionModel, 0)
	query := db.DB.Table(u.TableName()).
		Where("user_id = ? and action_type = ? ", uid, action)
	if err := query.Find(&actinsList).Error; err != nil {
		return nil, err
	}
	return actinsList, nil
}

func (u *ResourceModel) GetResources() ([]ResourceModel, error) {
	resourceList := make([]ResourceModel, 0)
	query := db.DB.Table(u.TableName()).
		Where("id > ?", 0)
	if err := query.Find(&resourceList).Error; err != nil {
		return nil, err
	}
	return resourceList, nil

}
